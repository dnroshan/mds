Missing servers:

	xmds		wmds		mmds		mdsx
	mdsw		mdsm		hwgamma		swgamma
	hwcursor	swcursor	cursorgamma	coopgamma
	host		remote		fb		kbd
	keytrans	kkbdrate	rat		compositor
	crtc		seat		dri		drag
	cursorshadow	kill		focus		colour
	state		screensaver
	transform: like xkeystone and xrandr --transform,
		   should transform the rat cursor too

Extra servers:

	kbdbind		ratbind		gestures	dcvs
	decorator	tile		stack		workspace
	tray		retro-crt	kbd2rat		multikey
	keystick	posmem		nest		mds
	meta		keybounce	slowkey		keycue
	ratbarrier	desktop
	a speech-to-keyboard server
	some server that hides the cursor when appropriate, such
	  as when the user starts typing
	some server for drawing on the screen
	some server for delaying video output from programs
          (used if a video is not in sync with its audio, and is ahead)

Missing commands:

	reg		clip		screenshot	slay
	chvt
	conf		Command line interface for reconfiguring servers

Need testing:

	registry
	clipboard
	kkbd
	kkbd, on a SPARC
	vt

Fast lanes
Optimise use of mutexe by replace them with rwlocks (where appropriate)
Listen for `Command: reregister`
Register protocols
A facility is needed to lookup available compose sequences to any character,
  it would be useful in character map programs so one can easier learn the
  compose sequences for character that one uses often
Servers should be stored in LIBEXECDIR.
Implement reconnect_to_display()

Something is up with the test, it does not exit on Control+C

Make sure it is possible and easy to change window manager
and desktop environment online.

It should be possible to remap keyboard LED:s.
It should be possible to force keys, especially pause/break,
to autorelease.

IPA keyboard layout

Add support for SIGINFO
  mds-registry  mds-server

If getpgrp() == tcgetpgrp(STDOUT_FILENO), a graphical program
should be able to commandeer a window (in particular a terminal
emulator) and return it when exiting.

How do we best avoid that hung clients freeze the display.

mds-hwgamma and mds-swgamma should be able to limit the
gamma ramps' convergence to help ensure that the screen is
always readable (optional feature). Soft limits are set
in argv, hard limits are set via #define:s at compile-time.

